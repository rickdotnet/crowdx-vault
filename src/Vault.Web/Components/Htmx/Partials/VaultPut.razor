@page "/htmx/partials/vault-put"
@using System.Text.Json.Nodes
@using NATS.Jwt.Models
@using NATS.NKeys

<CommandDisplay Prompt="@($"vault put {VaultId} foo")">
    <form hx-put="/kv/@VaultId/{keyName}"
          hx-ext="json-enc"
          hx-headers='{"Authorization": "Bearer @jwt"}'
          hx-target="#put-result"
          hx-swap="innerHTML"
          hx-indicator="#loading"
          hx-params="not keyName"
          hx-trigger="submit"
          hx-disabled-elt="#submit-key"
          hx-on:htmx:after-request="
            if(event.detail.xhr.status === 200) {
              const response = JSON.parse(event.detail.xhr.responseText);
              const keyName = document.getElementById('keyName').value;
              htmx.ajax('GET', '/htmx/partials/vault-get?vaultId=' + encodeURIComponent('@VaultId') + '&key=' + encodeURIComponent(keyName), '#vault-get');
              document.getElementById('submit-key-group').style.display = 'none';
              setTimeout(() => { window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' }); }, 100);
            }">

        <CommandInput Id="keyName" Label="key_name:" Text="foo" />
        <CommandInput Id="keyValue" Label="key_value:" Text="bar" />
        <CommandOutput Id="admin-token" Label="admin_token:" Text="@jwt" />
        <CommandSubmit Id="submit-key" Text="[CREATE_KEY]" />
    </form>

    <HtmxResult Id="put-result" />
    
</CommandDisplay>
<script>
    document.body.addEventListener('htmx:configRequest', function (evt) {
        const keyName = document.getElementById('keyName').value;
        evt.detail.path = evt.detail.path.replace('{keyName}', encodeURIComponent(keyName));

        const adminToken = document.getElementById('admin-token').textContent;
        if (adminToken) {
            evt.detail.headers['Authorization'] = 'Bearer ' + document.getElementById('admin-token').textContent;
        }
    });
</script>

@code {

    [SupplyParameterFromQuery]
    public string VaultId { get; set; } = string.Empty;

    [SupplyParameterFromQuery]
    public string Seed { get; set; } = string.Empty;

    private KeyPair? keyPair;
    private string jwt = string.Empty;

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(Seed))
            return;

        keyPair = KeyPair.FromSeed(Seed);
        var claims = new NatsGenericClaims
        {
            Subject = keyPair.GetPublicKey(),
            Expires = DateTimeOffset.UtcNow.AddMonths(6),
            Data = new Dictionary<string, JsonNode>()
            {
                { "vault:admin", VaultId }
            }
        };

        jwt = JwtUtil.Encode(claims, keyPair);
    }

}